{"ast":null,"code":"import _classCallCheck from \"/Users/mcrawford/Code/Minesweeper/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/mcrawford/Code/Minesweeper/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/mcrawford/Code/Minesweeper/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/mcrawford/Code/Minesweeper/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"/Users/mcrawford/Code/Minesweeper/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/mcrawford/Code/Minesweeper/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/mcrawford/Code/Minesweeper/src/components/Game.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { GiClusterBomb } from 'react-icons/gi';\nimport Board from './Board';\nimport config from '../config';\nimport { toggle, init, changeDifficulty as _changeDifficulty, gameover, clear } from '../actions';\nimport '../styles/game.css';\n\nvar Game =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Game, _Component);\n\n  function Game(props) {\n    var _this;\n\n    _classCallCheck(this, Game);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Game).call(this, props));\n    var difficulty = _this.props.difficulty;\n    _this.state = {\n      board: _this._initBoard(difficulty)\n    };\n    _this.handleClick = _this.handleClick.bind(_assertThisInitialized(_this));\n    _this.handleClickCell = _this.handleClickCell.bind(_assertThisInitialized(_this));\n    _this.handleRightClickCell = _this.handleRightClickCell.bind(_assertThisInitialized(_this));\n    _this.handleDoubleClickCell = _this.handleDoubleClickCell.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(Game, [{\n    key: \"_initBoard\",\n    value: function _initBoard(difficulty) {\n      var bombPlaces = this._initBombPlaces(difficulty);\n\n      var _config$difficulty = config[difficulty],\n          boardWidth = _config$difficulty.boardWidth,\n          boardHeight = _config$difficulty.boardHeight;\n      var board = Array.from(new Array(boardWidth), function () {\n        return new Array(boardHeight).fill({\n          bomb: false,\n          bombCount: 0,\n          open: false,\n          flagged: false\n        });\n      });\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = bombPlaces[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var place = _step.value;\n          board[place.x][place.y] = Object.assign({}, board[place.x][place.y], {\n            bomb: true\n          });\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      return board;\n    }\n  }, {\n    key: \"_initBombPlaces\",\n    value: function _initBombPlaces(difficulty) {\n      var bombPlaces = [];\n      var _config$difficulty2 = config[difficulty],\n          boardWidth = _config$difficulty2.boardWidth,\n          boardHeight = _config$difficulty2.boardHeight,\n          bombNum = _config$difficulty2.bombNum;\n\n      var _loop = function _loop() {\n        var x = Math.floor(Math.random() * boardWidth);\n        var y = Math.floor(Math.random() * boardHeight);\n\n        if (bombPlaces.length === 0) {\n          bombPlaces.push({\n            x: x,\n            y: y\n          });\n        } else {\n          var duplicated = bombPlaces.filter(function (place) {\n            return place.x === x && place.y === y;\n          }).length > 0;\n\n          if (!duplicated) {\n            bombPlaces.push({\n              x: x,\n              y: y\n            });\n          }\n        }\n      };\n\n      while (bombPlaces.length < bombNum) {\n        _loop();\n      }\n\n      return bombPlaces;\n    }\n  }, {\n    key: \"handleClick\",\n    value: function handleClick(e) {\n      e.preventDefault();\n      var difficulty = this.props.difficulty;\n      this.props.dispatch(init());\n      this.setState({\n        board: this._initBoard(difficulty)\n      });\n    }\n  }, {\n    key: \"handleClickCell\",\n    value: function handleClickCell(x, y) {\n      var _this$props = this.props,\n          gameover = _this$props.gameover,\n          clear = _this$props.clear;\n\n      if (gameover || clear) {\n        return;\n      }\n\n      this._open(x, y);\n    }\n  }, {\n    key: \"handleRightClickCell\",\n    value: function handleRightClickCell(x, y) {\n      var _this$props2 = this.props,\n          gameover = _this$props2.gameover,\n          clear = _this$props2.clear;\n\n      if (gameover || clear) {\n        return;\n      }\n\n      this._toggleFlag(x, y);\n    }\n  }, {\n    key: \"handleDoubleClickCell\",\n    value: function handleDoubleClickCell(x, y) {\n      var _this$props3 = this.props,\n          gameover = _this$props3.gameover,\n          clear = _this$props3.clear,\n          difficulty = _this$props3.difficulty;\n      var _config$difficulty3 = config[difficulty],\n          boardWidth = _config$difficulty3.boardWidth,\n          boardHeight = _config$difficulty3.boardHeight;\n      var board = this.state.board;\n\n      if (gameover || clear) {\n        return;\n      }\n\n      if (!board[x][y].open) {\n        return;\n      }\n\n      for (var i = x - 1; i <= x + 1; i++) {\n        for (var j = y - 1; j <= y + 1; j++) {\n          if (i < 0 || i >= boardWidth || j < 0 || j >= boardHeight || i === x && j === y || board[i][j].flagged) {\n            continue;\n          }\n\n          this._open(i, j);\n        }\n      }\n    }\n  }, {\n    key: \"changeDifficulty\",\n    value: function changeDifficulty(e) {\n      var difficulty = e.target.value;\n      this.props.dispatch(_changeDifficulty(difficulty));\n      this.setState({\n        board: this._initBoard(difficulty)\n      });\n    }\n  }, {\n    key: \"_open\",\n    value: function _open(x, y) {\n      var board = [].concat(this.state.board);\n      var _config$this$props$di = config[this.props.difficulty],\n          boardWidth = _config$this$props$di.boardWidth,\n          boardHeight = _config$this$props$di.boardHeight;\n\n      if (!board[x][y].open) {\n        var bombCount = 0;\n\n        for (var i = x - 1; i <= x + 1; i++) {\n          for (var j = y - 1; j <= y + 1; j++) {\n            if (i < 0 || i >= boardWidth || j < 0 || j >= boardHeight || i === x && j === y) {\n              continue;\n            }\n\n            if (board[i][j].bomb) {\n              bombCount++;\n            }\n          }\n        }\n\n        board[x][y] = Object.assign({}, board[x][y], {\n          open: true,\n          bombCount: bombCount\n        });\n        this.setState({\n          board: board\n        });\n\n        if (board[x][y].flagged) {\n          this._toggleFlag(x, y);\n        }\n\n        if (board[x][y].bomb) {\n          this.props.dispatch(gameover());\n        }\n\n        if (this._isClear(board)) {\n          this.props.dispatch(clear());\n        }\n\n        if (bombCount === 0 && !board[x][y].bomb) {\n          for (var _i = x - 1; _i <= x + 1; _i++) {\n            for (var _j = y - 1; _j <= y + 1; _j++) {\n              if (_i < 0 || _i >= boardWidth || _j < 0 || _j >= boardHeight || _i === x && _j === y || board[_i][_j].flagged) {\n                continue;\n              }\n\n              this._open(_i, _j);\n            }\n          }\n        }\n      }\n    }\n  }, {\n    key: \"_isClear\",\n    value: function _isClear(board) {\n      var openCount = 0;\n      var difficulty = this.props.difficulty;\n      var _config$difficulty4 = config[difficulty],\n          boardWidth = _config$difficulty4.boardWidth,\n          boardHeight = _config$difficulty4.boardHeight,\n          bombNum = _config$difficulty4.bombNum;\n      board.forEach(function (row, i) {\n        row.forEach(function (cell, i) {\n          if (cell.open) {\n            openCount++;\n          }\n        });\n      });\n      return openCount === boardWidth * boardHeight - bombNum;\n    }\n  }, {\n    key: \"_toggleFlag\",\n    value: function _toggleFlag(x, y) {\n      var board = [].concat(this.state.board);\n      var flagged = board[x][y].flagged;\n      board[x][y] = Object.assign({}, board[x][y], {\n        flagged: !flagged\n      });\n      this.setState({\n        board: board\n      });\n      this.props.dispatch(toggle(!flagged));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var board = this.state.board;\n      var _this$props4 = this.props,\n          difficulty = _this$props4.difficulty,\n          gameover = _this$props4.gameover,\n          clear = _this$props4.clear,\n          bomb = _this$props4.bomb;\n      var _config$difficulty5 = config[difficulty],\n          boardWidth = _config$difficulty5.boardWidth,\n          cellSize = _config$difficulty5.cellSize;\n      var boardWidthPx = boardWidth * cellSize;\n      var status = React.createElement(\"span\", {\n        className: \"status\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179\n        },\n        __self: this\n      });\n\n      if (gameover) {\n        status = React.createElement(\"span\", {\n          id: \"gameover\",\n          className: \"status\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 181\n          },\n          __self: this\n        }, \"Gameover\");\n      } else if (clear) {\n        status = React.createElement(\"span\", {\n          id: \"clear\",\n          className: \"status\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 183\n          },\n          __self: this\n        }, \"Clear!\");\n      }\n\n      return React.createElement(\"div\", {\n        id: \"game\",\n        style: {\n          width: boardWidthPx\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187\n        },\n        __self: this\n      }, \"Minesweeper\"), React.createElement(\"div\", {\n        id: \"menu\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        onClick: this.handleClick,\n        id: \"restart\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189\n        },\n        __self: this\n      }, \"Restart\"), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189\n        },\n        __self: this\n      }), React.createElement(\"select\", {\n        value: difficulty,\n        onChange: function onChange(e) {\n          return _this2.changeDifficulty(e);\n        },\n        style: {\n          marginRight: 5\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190\n        },\n        __self: this\n      }, React.createElement(\"option\", {\n        value: 'easy',\n        key: 'easy',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191\n        },\n        __self: this\n      }, \"Easy\"), React.createElement(\"option\", {\n        value: 'normal',\n        key: 'normal',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192\n        },\n        __self: this\n      }, \"Normal\"), React.createElement(\"option\", {\n        value: 'hard',\n        key: 'hard',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193\n        },\n        __self: this\n      }, \"Hard\"), React.createElement(\"option\", {\n        value: 'veryHard',\n        key: 'veryHard',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194\n        },\n        __self: this\n      }, \"Very Hard\"), React.createElement(\"option\", {\n        value: 'maniac',\n        key: 'maniac',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195\n        },\n        __self: this\n      }, \"Maniac\")), React.createElement(\"span\", {\n        id: \"bomb\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197\n        },\n        __self: this\n      }, React.createElement(GiClusterBomb, {\n        id: \"bomblayout\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197\n        },\n        __self: this\n      }), \" \", bomb), status), React.createElement(Board, {\n        board: board,\n        cellSize: cellSize,\n        onClick: this.handleClickCell,\n        onRightClick: this.handleRightClickCell,\n        onDoubleClick: this.handleDoubleClickCell,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"instructions\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 208\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"boldFont\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209\n        },\n        __self: this\n      }, \"Game Instructions\"), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210\n        },\n        __self: this\n      }, \"Click on a cell and it will open.\"), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 211\n        },\n        __self: this\n      }, \"Right click to toggle a flag.\"), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 211\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 212\n        },\n        __self: this\n      }, \"Double click to open cells around the board.\")), React.createElement(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214\n        },\n        __self: this\n      }), React.createElement(\"p\", {\n        className: \"githublink\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 215\n        },\n        __self: this\n      }, React.createElement(\"a\", {\n        href: \"https://github.com/mickell1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216\n        },\n        __self: this\n      }, \"Mickell Crawford\"), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217\n        },\n        __self: this\n      }), React.createElement(\"a\", {\n        href: \"https://github.com/mickell1/Minesweeper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 218\n        },\n        __self: this\n      }, \" View Code\"))));\n    }\n  }]);\n\n  return Game;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return state.game;\n};\n\nexport default connect(mapStateToProps)(Game);","map":{"version":3,"sources":["/Users/mcrawford/Code/Minesweeper/src/components/Game.js"],"names":["React","Component","connect","GiClusterBomb","Board","config","toggle","init","changeDifficulty","gameover","clear","Game","props","difficulty","state","board","_initBoard","handleClick","bind","handleClickCell","handleRightClickCell","handleDoubleClickCell","bombPlaces","_initBombPlaces","boardWidth","boardHeight","Array","from","fill","bomb","bombCount","open","flagged","place","x","y","Object","assign","bombNum","Math","floor","random","length","push","duplicated","filter","e","preventDefault","dispatch","setState","_open","_toggleFlag","i","j","target","value","concat","_isClear","openCount","forEach","row","cell","cellSize","boardWidthPx","status","width","marginRight","mapStateToProps","game"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { GiClusterBomb } from 'react-icons/gi'\nimport Board from './Board'\nimport config from '../config'\nimport { toggle, init, changeDifficulty, gameover, clear } from '../actions'\nimport '../styles/game.css'\n\nclass Game extends Component {\n  constructor(props) {\n    super(props)\n    const { difficulty } = this.props\n    this.state = { board: this._initBoard(difficulty) }\n    this.handleClick = this.handleClick.bind(this)\n    this.handleClickCell = this.handleClickCell.bind(this)\n    this.handleRightClickCell = this.handleRightClickCell.bind(this)\n    this.handleDoubleClickCell = this.handleDoubleClickCell.bind(this)\n  }\n\n  _initBoard(difficulty) {\n    const bombPlaces = this._initBombPlaces(difficulty)\n    const { boardWidth, boardHeight } = config[difficulty]\n    const board = Array.from(\n      new Array(boardWidth), () => new Array(boardHeight).fill(\n        { bomb: false, bombCount: 0, open: false, flagged: false }\n      )\n    )\n    for (let place of bombPlaces) {\n      board[place.x][place.y] = Object.assign({}, board[place.x][place.y], { bomb: true })\n    }\n    return board\n  }\n\n  _initBombPlaces(difficulty) {\n    const bombPlaces = []\n    const { boardWidth, boardHeight, bombNum } = config[difficulty]\n    while (bombPlaces.length < bombNum) {\n      const x = Math.floor(Math.random() * boardWidth)\n      const y = Math.floor(Math.random() * boardHeight)\n      if (bombPlaces.length === 0) {\n        bombPlaces.push({ x: x, y: y })\n      } else {\n        const duplicated = bombPlaces.filter((place) => {\n          return place.x === x && place.y === y\n        }).length > 0\n        if (!duplicated) {\n          bombPlaces.push({ x: x, y: y })\n        }\n      }\n    }\n    return bombPlaces\n  }\n\n  handleClick(e) {\n    e.preventDefault()\n    const { difficulty } = this.props\n    this.props.dispatch(init())\n    this.setState({ board: this._initBoard(difficulty) })\n  }\n\n  handleClickCell(x, y) {\n    const { gameover, clear } = this.props\n    if (gameover || clear) {\n      return\n    }\n    this._open(x, y)\n  }\n\n  handleRightClickCell(x, y) {\n    const { gameover, clear } = this.props\n    if (gameover || clear) {\n      return\n    }\n    this._toggleFlag(x, y)\n  }\n\n  handleDoubleClickCell(x, y) {\n    const { gameover, clear, difficulty } = this.props\n    const { boardWidth, boardHeight } = config[difficulty]\n    const { board } = this.state\n    if (gameover || clear) {\n      return\n    }\n    if (!board[x][y].open) {\n      return\n    }\n\n    for (let i = x - 1; i <= x + 1; i++) {\n      for (let j = y - 1; j <= y + 1; j++) {\n        if ((i < 0 || i >= boardWidth) ||\n            (j < 0 || j >= boardHeight) ||\n            (i === x && j === y) ||\n            (board[i][j].flagged)) {\n          continue\n        }\n        this._open(i, j)\n      }\n    }\n  }\n\n  changeDifficulty(e) {\n    const difficulty = e.target.value\n    this.props.dispatch(changeDifficulty(difficulty))\n    this.setState({ board: this._initBoard(difficulty) })\n  }\n\n  _open(x, y) {\n    const board = [].concat(this.state.board)\n    const { boardWidth, boardHeight } = config[this.props.difficulty]\n    if (!board[x][y].open) {\n      let bombCount = 0\n      for (let i = x - 1; i <= x + 1; i++) {\n        for (let j = y - 1; j <= y + 1; j++) {\n          if ((i < 0 || i >= boardWidth) ||\n              (j < 0 || j >= boardHeight) ||\n              (i === x && j === y)) {\n            continue\n          }\n          if (board[i][j].bomb) {\n            bombCount++\n          }\n        }\n      }\n      board[x][y] = Object.assign({}, board[x][y], { open: true, bombCount: bombCount })\n      this.setState({ board })\n      if (board[x][y].flagged) {\n        this._toggleFlag(x, y)\n      }\n      if (board[x][y].bomb) {\n        this.props.dispatch(gameover())\n      }\n      if (this._isClear(board)) {\n        this.props.dispatch(clear())\n      }\n\n      if (bombCount === 0 && !board[x][y].bomb) {\n        for (let i = x - 1; i <= x + 1; i++) {\n          for (let j = y - 1; j <= y + 1; j++) {\n            if ((i < 0 || i >= boardWidth) ||\n                (j < 0 || j >= boardHeight) ||\n                (i === x && j === y) ||\n                (board[i][j].flagged)) {\n              continue\n            }\n            this._open(i, j)\n          }\n        }\n      }\n    }\n  }\n\n  _isClear(board) {\n    let openCount = 0\n    const { difficulty } = this.props\n    const { boardWidth, boardHeight, bombNum } = config[difficulty]\n    board.forEach((row, i) => {\n      row.forEach((cell, i) => {\n        if (cell.open) {\n          openCount++\n        }\n      })\n    })\n    return openCount === (boardWidth * boardHeight - bombNum)\n  }\n\n  _toggleFlag(x, y) {\n    const board = [].concat(this.state.board)\n    const { flagged } = board[x][y]\n    board[x][y] = Object.assign({}, board[x][y], { flagged: !flagged })\n    this.setState({ board })\n    this.props.dispatch(toggle(!flagged))\n  }\n\n  render() {\n    const { board } = this.state\n    const { difficulty, gameover, clear, bomb } = this.props\n    const { boardWidth, cellSize } = config[difficulty]\n    const boardWidthPx = boardWidth * cellSize\n    let status = <span className=\"status\"></span>\n    if (gameover) {\n      status = <span id=\"gameover\" className=\"status\">Gameover</span>\n    } else if (clear) {\n      status = <span id=\"clear\" className=\"status\">Clear!</span>\n    }\n    return (\n      <div id=\"game\" style={{ width: boardWidthPx }}>\n        <h1>Minesweeper</h1>\n        <div id=\"menu\">\n          <button onClick={this.handleClick} id=\"restart\">Restart</button><br />\n          <select value={difficulty} onChange={(e) => this.changeDifficulty(e)} style={{ marginRight: 5 }}>\n            <option value={'easy'} key={'easy'}>Easy</option>\n            <option value={'normal'} key={'normal'}>Normal</option>\n            <option value={'hard'} key={'hard'}>Hard</option>\n            <option value={'veryHard'} key={'veryHard'}>Very Hard</option>\n            <option value={'maniac'} key={'maniac'}>Maniac</option>\n          </select>\n          <span id=\"bomb\"><GiClusterBomb id='bomblayout' /> {bomb}</span>\n          {status}\n        </div>\n        <Board\n          board={board}\n          cellSize={cellSize}\n          onClick={this.handleClickCell}\n          onRightClick={this.handleRightClickCell}\n          onDoubleClick={this.handleDoubleClickCell}\n        />\n        <div className=\"instructions\">\n          <p>\n            <span className=\"boldFont\">Game Instructions</span><br />\n            <span>Click on a cell and it will open.</span><br />\n            <span>Right click to toggle a flag.</span><br />\n            <span>Double click to open cells around the board.</span>\n          </p>\n          <hr />\n          <p className='githublink'>\n            <a href=\"https://github.com/mickell1\">Mickell Crawford</a>\n            <br />\n            <a href=\"https://github.com/mickell1/Minesweeper\"> View Code</a>\n          </p>\n        </div>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => state.game\n\nexport default connect(mapStateToProps)(Game)"]},"metadata":{},"sourceType":"module"}