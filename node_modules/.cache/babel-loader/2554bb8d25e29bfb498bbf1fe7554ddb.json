{"ast":null,"code":"import { TOGGLE_FLAG, START, CHANGE_DIFFICULTY, GAMEOVER, CLEAR } from '../actions/types';\nimport config from '../config';\nvar initialState = {\n  gameover: false,\n  clear: false,\n  bomb: config['easy'].bombNum,\n  difficulty: 'easy'\n};\n\nvar game = function game() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case TOGGLE_FLAG:\n      {\n        var flagged = action.payload.flagged;\n        var bomb = state.bomb;\n\n        if (flagged) {\n          bomb -= 1;\n        } else {\n          bomb += 1;\n        }\n\n        return Object.assign({}, state, {\n          bomb: bomb\n        });\n      }\n\n    case START:\n      {\n        return {\n          gameover: false,\n          clear: false,\n          bomb: config[state.difficulty].bombNum,\n          difficulty: state.difficulty\n        };\n      }\n\n    case CHANGE_DIFFICULTY:\n      {\n        var difficulty = action.payload.difficulty;\n        return {\n          gameover: false,\n          clear: false,\n          bomb: config[difficulty].bombNum,\n          difficulty: difficulty\n        };\n      }\n\n    case GAMEOVER:\n      {\n        return Object.assign({}, state, {\n          gameover: true\n        });\n      }\n\n    case CLEAR:\n      {\n        return Object.assign({}, state, {\n          clear: true\n        });\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default game;","map":{"version":3,"sources":["/Users/mcrawford/Code/Minesweeper/src/reducers/game.js"],"names":["TOGGLE_FLAG","START","CHANGE_DIFFICULTY","GAMEOVER","CLEAR","config","initialState","gameover","clear","bomb","bombNum","difficulty","game","state","action","type","flagged","payload","Object","assign"],"mappings":"AAAA,SACEA,WADF,EAEEC,KAFF,EAGEC,iBAHF,EAIEC,QAJF,EAKEC,KALF,QAMO,kBANP;AAOA,OAAOC,MAAP,MAAmB,WAAnB;AAEA,IAAMC,YAAY,GAAG;AACnBC,EAAAA,QAAQ,EAAE,KADS;AAEnBC,EAAAA,KAAK,EAAE,KAFY;AAGnBC,EAAAA,IAAI,EAAEJ,MAAM,CAAC,MAAD,CAAN,CAAeK,OAHF;AAInBC,EAAAA,UAAU,EAAE;AAJO,CAArB;;AAOA,IAAMC,IAAI,GAAG,SAAPA,IAAO,GAAkC;AAAA,MAAjCC,KAAiC,uEAAzBP,YAAyB;AAAA,MAAXQ,MAAW;;AAC7C,UAAOA,MAAM,CAACC,IAAd;AACE,SAAKf,WAAL;AAAkB;AAAA,YACRgB,OADQ,GACIF,MAAM,CAACG,OADX,CACRD,OADQ;AAAA,YAEVP,IAFU,GAEDI,KAFC,CAEVJ,IAFU;;AAGhB,YAAIO,OAAJ,EAAa;AACXP,UAAAA,IAAI,IAAI,CAAR;AACD,SAFD,MAEO;AACLA,UAAAA,IAAI,IAAI,CAAR;AACD;;AACD,eAAOS,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBN,KAAlB,EAAyB;AAAEJ,UAAAA,IAAI,EAAJA;AAAF,SAAzB,CAAP;AACD;;AACD,SAAKR,KAAL;AAAY;AACV,eAAO;AACLM,UAAAA,QAAQ,EAAE,KADL;AAELC,UAAAA,KAAK,EAAE,KAFF;AAGLC,UAAAA,IAAI,EAAEJ,MAAM,CAACQ,KAAK,CAACF,UAAP,CAAN,CAAyBD,OAH1B;AAILC,UAAAA,UAAU,EAAEE,KAAK,CAACF;AAJb,SAAP;AAMD;;AACD,SAAKT,iBAAL;AAAwB;AAAA,YACdS,UADc,GACCG,MAAM,CAACG,OADR,CACdN,UADc;AAEtB,eAAO;AACLJ,UAAAA,QAAQ,EAAE,KADL;AAELC,UAAAA,KAAK,EAAE,KAFF;AAGLC,UAAAA,IAAI,EAAEJ,MAAM,CAACM,UAAD,CAAN,CAAmBD,OAHpB;AAILC,UAAAA,UAAU,EAAVA;AAJK,SAAP;AAMD;;AACD,SAAKR,QAAL;AAAe;AACb,eAAOe,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBN,KAAlB,EAAyB;AAAEN,UAAAA,QAAQ,EAAE;AAAZ,SAAzB,CAAP;AACD;;AACD,SAAKH,KAAL;AAAY;AACV,eAAOc,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBN,KAAlB,EAAyB;AAAEL,UAAAA,KAAK,EAAE;AAAT,SAAzB,CAAP;AACD;;AACD;AAAS,aAAOK,KAAP;AAlCX;AAoCD,CArCD;;AAuCA,eAAeD,IAAf","sourcesContent":["import {\n  TOGGLE_FLAG,\n  START,\n  CHANGE_DIFFICULTY,\n  GAMEOVER,\n  CLEAR\n} from '../actions/types'\nimport config from '../config'\n\nconst initialState = {\n  gameover: false,\n  clear: false,\n  bomb: config['easy'].bombNum,\n  difficulty: 'easy'\n}\n\nconst game = (state = initialState, action) => {\n  switch(action.type) {\n    case TOGGLE_FLAG: {\n      const { flagged } = action.payload\n      let { bomb } = state\n      if (flagged) {\n        bomb -= 1\n      } else {\n        bomb += 1\n      }\n      return Object.assign({}, state, { bomb })\n    }\n    case START: {\n      return {\n        gameover: false,\n        clear: false,\n        bomb: config[state.difficulty].bombNum,\n        difficulty: state.difficulty\n      }\n    }\n    case CHANGE_DIFFICULTY: {\n      const { difficulty } = action.payload\n      return {\n        gameover: false,\n        clear: false,\n        bomb: config[difficulty].bombNum,\n        difficulty\n      }\n    }\n    case GAMEOVER: {\n      return Object.assign({}, state, { gameover: true })\n    }\n    case CLEAR: {\n      return Object.assign({}, state, { clear: true })\n    }\n    default: return state\n  }\n}\n\nexport default game"]},"metadata":{},"sourceType":"module"}